import PDFDocument from 'pdfkit';
import fs from 'fs';
import request from 'request-promise';
import { OpenAIApi } from "openai";
// import { Request, Response } from "express"
import { generateRandomFilename, openAiConfiguration, uploadToCloudStorage } from './utility';



const openai = new OpenAIApi(openAiConfiguration);

const chatCreator = async (prompt: any, tokenNumber: any) => {
  const content = `create a ${prompt.wordLimit} words ${prompt.flag} for ${prompt.type} about ${prompt.msg}`;
  console.log(content);
  const x = await openai.createChatCompletion({
    model: 'gpt-3.5-turbo',
    messages: [
      {
        role: 'user',
        content
      }
    ],
    max_tokens: tokenNumber
  });
  if (x.data.choices[0].message) {
    return x.data.choices[0].message.content;

  }
};

const generate_image = async (prompt: any) => {
  console.log("ðŸ”¥ðŸ”¥ðŸ”¥ Generating Image ðŸ”¥ðŸ”¥ðŸ”¥");

  const result = await openai.createImage({
    prompt,
    n: 1, //number of images to generate
    size: "512x512" //size always should be in ['256x256', '512x512', '1024x1024']
  });
  const url = result.data.data[0].url
  return url

}

interface IStoryObj {
  title: string | undefined,
  body: any
  chat: any
}
interface IStoryImgObj {
  title: string | undefined
  body: any
}
const generate_content = async (prompt: any) => {
  const storyObject: IStoryObj = {
    title: "",
    body: [],
    chat: ""
  };
  const storyImageObject: IStoryImgObj = {
    title: "",
    body: []
  };

  storyObject.title = await chatCreator({
    ...prompt,
    flag: "title",
    wordLimit: "50"
  }, 300)
  storyImageObject.title = await generate_image(storyObject.title);

  storyObject.chat = await chatCreator({
    ...prompt,
    msg: storyObject.title,
    flag: "story",
    wordLimit: "200-250"
  }, 500)

  storyObject.body = storyObject.chat.split("\n\n")

  // Generate a random float between 0 and 1
  const min = 0;
  const max = storyObject.body.length;
  const randomInt = Math.floor(Math.random() * (max - min + 1)) + min;

  storyImageObject.body.push(await generate_image(storyObject.body[randomInt]));
  // storyImageObject.body.push(await generate_image(storyObject.body[randomInt]));
  return { storyObject, storyImageObject }

}




const generatePDF = async (prompt: any) => {


  console.log("ðŸ”¥ðŸ”¥ðŸ”¥ Generating ContentðŸ”¥ðŸ”¥ðŸ”¥");
  const { storyObject, storyImageObject } = await generate_content(prompt)
  console.log("ðŸ”¥ðŸ”¥ðŸ”¥ Generating PDFðŸ”¥ðŸ”¥ðŸ”¥");

  const randomFilename = generateRandomFilename('pdf');
  const doc = new PDFDocument({ size: 'A4' });
  doc.pipe(fs.createWriteStream(randomFilename));


  doc.fontSize(26)
    .font('./fonts/Helvetica-Bold.ttf')

  // Set the alignment of the title to center
  doc.text(String(storyObject.title),
    { align: 'center' });
  doc.moveDown(2);

  doc
    .font('Times-Roman', 12)
    .text('Generated by: md.danialislam@gmail.com', 300, 680)
    .fillColor('blue')
    .text(`This file can be found at https://storage.googleapis.com/buetcsehackathonpdf/pdfs/${randomFilename}`, 100, 690)
  const imageBuffer = await request.get({ url: String(storyImageObject.title), encoding: null });

  // Calculate the image dimensions
  const imageWidth = doc.page.width - 100; // Adjust the width as needed
  const imageHeight = (imageWidth * 9) / 16; // Assuming a 16:9 aspect ratio

  // Center the image on the page
  const x = (doc.page.width - imageWidth) / 2;
  const y = (doc.page.height - imageHeight) / 2;

  // Add the cover image to the PDF
  doc.image(imageBuffer, x, y, { width: imageWidth, height: imageHeight });

  // Add another page
  doc.addPage()

  const imageBuffer2 = await request.get({ url: String(storyImageObject.body[0]), encoding: null });
  // console.log("Image 2 get ")
  // // Add the cover image to the PDF
  doc.image(imageBuffer2, x, y, { width: imageWidth, height: imageHeight });
  doc.moveDown(2);

  doc
    .font('Times-Roman', 12)
    .moveDown()
    .text(String(storyObject.chat), {
      width: 412,
      align: 'justify',
      indent: 30,
      columns: 2,
      height: 300,
      ellipsis: true
    });

  // Finalize PDF file
  // doc.pipe(fs.createWriteStream('./output.pdf'));
  doc.end()


  const bucketName = process.env.STORAGE_BUCKET || 'buetcsehackathonpdf';
  const destinationFilename = `pdfs/${randomFilename}`;
  await uploadToCloudStorage(bucketName, randomFilename, destinationFilename);
  const fileUrl = `https://storage.googleapis.com/${bucketName}/${destinationFilename}`;
  fs.unlinkSync(`./${randomFilename}`);
  return fileUrl;

}

export default generatePDF;